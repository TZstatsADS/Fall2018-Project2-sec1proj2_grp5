set_key("AIzaSyDTIop6J0QlXc8RRbj5M3kAVyOy3zyXzTE")
# filter housing data:
housingFilter=reactive({
bedroom_filter=housing$bedrooms>input$min_bedrooms
bathroom_filter=housing$bathrooms>input$min_bathrooms
price_filter=housing$price>=input$min_price & housing$price<=input$max_price
filter=bedroom_filter & bathroom_filter & price_filter
return(housing[filter,])
})
# show data in the map:
observe({leafletProxy("map")%>%clearGroup("housing_cluster")%>%
addMarkers(data=housingFilter(),
lng=~lng,
lat=~lat,
clusterOptions=markerClusterOptions(),
group="housing_cluster"
)
})
# show current status of icons:
showStatus=reactive({
if (is.null(input$map_bounds)){
return("cloud")
}
else{
if(input$map_zoom<16){
return('cloud')
}
else{
return('details')
}
}
})
# hide and show clouds
observe({
if(showStatus()=="cloud"){
leafletProxy("map") %>%showGroup("housing_cluster")%>%clearGroup("new_added")
}
else{
leafletProxy("map") %>%hideGroup("housing_cluster")
}
})
# show housing details when zoom to one specific level
observe({
if(showStatus()=="details"){
if(nrow(marksInBounds())!=0){
leafletProxy("map")%>%clearGroup(group="new_added")%>%
addCircleMarkers(data=marksInBounds(),
lat=~lat,
lng=~lng,
label=~as.character(price),
radius=5,
stroke=FALSE,
fillColor = "green",
fillOpacity=0.7,
group="new_added",
labelOptions = labelOptions(
noHide = T,
offset=c(20,-15),
opacity=0.7,
direction="left",
style=list(
background="green",
color="white"
)
)
)
}
else{
leafletProxy("map")%>%clearGroup(group="new_added")
}
}
})
# get the housing data in the bounds
marksInBounds <- reactive({
if (is.null(input$map_bounds))
return(housing[FALSE,])
bounds <- input$map_bounds
latRng <- range(bounds$north, bounds$south)
lngRng <- range(bounds$east, bounds$west)
return(
subset(housingFilter(),
lat>= latRng[1] & lat <= latRng[2] &
lng >= lngRng[1] & lng <= lngRng[2])
)
})
# sort housing in current zoom level
observe({
housing_sort=marksInBounds()
if(nrow(housing_sort)!=0){
action=apply(housing_sort,1,function(r){
addr=r["addr"]
lat=r["lat"]
lng=r["lng"]
paste0("<a class='go-map' href='' data-lat='",lat,"'data-lng='",lng,"'>",addr,'</a>')
}
)
housing_sort$addr=action
output$rank <- renderDataTable(housing_sort[,c("addr","price","bedrooms","bathrooms")],escape=FALSE)
}
else{
output$rank=renderDataTable(housing_sort[,c("addr","price","bedrooms","bathrooms")])
}
})
# When point in map is hovered, show a popup with housing info
observe({
event <- input$map_marker_mouseover
if (is.null(event))
return()
if(showStatus()=="details"){
isolate({
showPopupHover(event$lat, event$lng,housing=housingFilter())
})
}
})
# mouseout the point and cancel popup
observe({
event <- input$map_marker_mouseout
if (is.null(event))
return()
isolate({
leafletProxy("map") %>% clearPopups()
})
})
# click name to go to that point
observe({
if (is.null(input$goto))
return()
isolate({
map <- leafletProxy("map")
lat <- as.numeric(input$goto$lat)
lng <- as.numeric(input$goto$lng)
map %>% setView(lng = lng, lat = lat, zoom = 16)
})
})
# hover the list to show info
observe({
if (is.null(input$showPop))
return()
isolate({
remove=as.numeric(input$showPop$remove)
map <- leafletProxy("map")
if(remove==0){
lat <- as.numeric(input$showPop$lat)
lng <- as.numeric(input$showPop$lng)
showPopupHover(lat, lng,housingFilter())
}
else{
map %>% clearPopups()
}
})
})
####################### Second Part #########################
observeEvent(input$destination, {
if(''==input$destination){
leafletProxy('map') %>% setView(lng=-73.93, lat=40.77, zoom=12)
}
else if('Museum'==input$destination){
leafletProxy('map') %>% clearMarkerClusters() %>% setView(lng=-73.93, lat=40.77, zoom=12) %>%
addMarkers(museum$longtitude,
museum$latitude, icon=icon_museum,
clusterOptions=markerClusterOptions(),
popup=paste('Name:',museum$NAME, '<br/>',
'Tel:', museum$TEL, '<br/>',
'Zip:', museum$ZIP, '<br/>',
'Website:', a(museum$URL, href=museum$URL), '<br/>',
'Add:', museum$ADRESS1, '<br/>'
)
)
}
else if('Theater'==input$destination)
{
leafletProxy('map') %>% clearMarkerClusters() %>% setView(lng=-73.93, lat=40.77, zoom=12) %>%
addMarkers(theatre$longtitude,
theatre$latitude, icon=icon_theatre,
clusterOptions=markerClusterOptions(),
popup=paste('Name:', theatre$NAME, '<br/>',
'Tel:', theatre$TEL, '<br/>',
'Zip:', theatre$ZIP, '<br/>',
'Website:', a(theatre$URL, href=theatre$URL), '<br/>',
'Add:', theatre$ADDRESS1, '<br/>'))
}
else if ('Gallery'==input$destination)
{
leafletProxy('map') %>% clearMarkerClusters() %>% setView(lng=-73.93, lat=40.77, zoom=12) %>%
addMarkers(gallery$LON,
gallery$LAT, icon=icon_gallery,
clusterOptions=markerClusterOptions(),
popup=paste('Name:', gallery$NAME, '<br/>',
'Tel:', gallery$TEL, '<br/>',
'Zip:', gallery$ZIP, '<br/>',
'Website:', a(gallery$URL, href=gallery$URL), '<br/>',
'Add:', gallery$ADDRESS1, '<br/>'))
}
else {
leafletProxy('map') %>% clearMarkerClusters() %>% setView(lng=-73.93, lat=40.77, zoom=12) %>%
addMarkers(library$LON,
library$LAT, icon=icon_library,
popup=paste('Name:', library$NAME, '<br/>',
'Zip:', library$ZIP, '<br/>',
'Website:', a(library$URL, href=library$URL), '<br/>',
'Add:', library$ADDRESS1, '<br/>'),
clusterOptions=markerClusterOptions())
}
})
observe({
click<- input$map_marker_click
if(is.null(click))
return()
## use click to access the zoom and set the view according this marker
globallng <<- click$lng
print(globallng)
globallat <<- click$lat
print(globallat)
leafletProxy('map') %>% setView(lng=click$lng,
lat=click$lat,
zoom=15)
})
observeEvent(input$button2,{
leafletProxy('map') %>% setView(lng=-73.93, lat=40.77, zoom=12)
})
observeEvent(input$map_marker_click, {
show('Sure')
})
observeEvent(input$button1, {
show('Resta')
})
observeEvent(input$button3,{
show('Recom')
})
observeEvent(input$button3, {
click<- input$map_marker_click
type<- input$type
rank<- input$rank
if(is.null(type))
return()
lng<- click$lng
lat<- click$lat
if(rank=='by Distance'){
add_to_df<- reactive({
rest <-  restaurant %>% dplyr::filter(TYPE==type) %>%
mutate(dist = sqrt((LON-lng)^2 + (LAT-lat)^2)) %>% arrange(dist)
rest
})
new_df<- reactive({
all_rest <- add_to_df()
top6<- head(all_rest,6)
top6
})
dist_column<- reactive({
avail_rest<- new_df()
dist<- avail_rest$dist
dist
})
if(all(dist_column()>0.05)){
output$recom<- renderText('Oops! There is no available restaurant around you!')}
else{leafletProxy('map',data = new_df())  %>% addMarkers(lng = ~LON, lat = ~LAT, icon=icon_rest,
popup=~paste('Name:', NAME, '<br/>',
'Tel:', TEL, '<br/>',
'Zip:', ZIP, '<br/>',
'Add:', ADDRESS, '<br/>',
'Yelp.Star:', YELP.STAR, '<br/>'))
output$recom<- renderText({
recom_rest<-new_df()
deslng = recom_rest[1,]$LON
print(deslng)
deslat = recom_rest[1,]$LAT
print(deslat)
df <- google_directions(origin = c(globallat, globallng),
destination = c(deslat, deslng),
mode = "walking",
simplify = TRUE)
print(df)
df_routes <- data.frame(polyline = direction_polyline(df))
dfdata <- structure(list(lat = c(globallat, deslat), lon = c(globallng, deslng)), .Names = c("lat","lon"), row.names = 379:380, class = "data.frame")
output$googlemap <- renderGoogle_map({
google_map(location = c(40.77, -73.93),
data = dfdata,
zoom = 12,
height = "800px")  %>%
add_polylines(data = df_routes, polyline = "polyline") %>%
add_markers()
})
paste('Name:', recom_rest[1,]$NAME,'\n',
'Tel:', recom_rest[1,]$TEL,'\n',
'Zip:', recom_rest[1,]$ZIP,'\n',
'Add:', recom_rest[1,]$ADDRESS,'\n',
'Yelp.Star:', recom_rest[1,]$YELP.STAR)
})
}
}
else{
add_to_df<- reactive({
rest<- restaurant %>% dplyr::filter(TYPE==type) %>%
mutate(dist = sqrt((LON-lng)^2 + (LAT-lat)^2)) %>% arrange(dist)
rest
})
new_df<- reactive({
all_rest<-add_to_df()
top15<-head(all_rest, 15) %>% arrange(desc(YELP.STAR))
top6<- head(top15, 6)
top6
})
dist_column<- reactive({
avail_rest<-new_df()
dist<- avail_rest$dist
dist
})
if(all(dist_column()>0.05)){
output$recom<- renderText('Oops! There is no available restaurant around you!')}
else{leafletProxy('map',data = new_df())  %>% addMarkers(lng = ~LON, lat = ~LAT, icon=icon_rest,
popup=~paste('Name:', NAME, '<br/>',
'Tel:', TEL, '<br/>',
'Zip:', ZIP, '<br/>',
'Add:', ADDRESS, '<br/>',
'Yelp.Star:', YELP.STAR, '<br/>'))
output$recom<- renderText({
recom_rest<-new_df()
deslng = recom_rest[1,]$LON
print(deslng)
deslat = recom_rest[1,]$LAT
print(deslat)
print(globallng)
print(globallat)
df <- google_directions(origin = c(globallat, globallng),
destination = c(deslat, deslng),
mode = "walking",
simplify = TRUE)
print(df)
df_routes <- data.frame(polyline = direction_polyline(df))
dfdata <- structure(list(lat = c(globallat, deslat), lon = c(globallng, deslng)), .Names = c("lat","lon"), row.names = 379:380, class = "data.frame")
output$googlemap <- renderGoogle_map({
google_map(location = c(40.77, -73.93),
data = dfdata,
zoom = 12,
height = "800px")  %>%
add_polylines(data = df_routes, polyline = "polyline")  %>%
add_markers()
})
paste('Name:', recom_rest[1,]$NAME,'\n',
'Tel:', recom_rest[1,]$TEL,'\n',
'Zip:', recom_rest[1,]$ZIP,'\n',
'Add:', recom_rest[1,]$ADDRESS,'\n',
'Yelp.Star:', recom_rest[1,]$YELP.STAR)
})
}
}
})
observeEvent(input$button4,{
leafletProxy('map') %>% clearMarkers()
hide('Recom')
})
observeEvent(input$button5,{
leafletProxy('map') %>% clearMarkers()
hide('Recom')
hide('Resta')
hide('Sure')
})
})
housing<-na.omit(read.csv("housing.csv",header=TRUE, stringsAsFactors =FALSE))
housing
housing<-na.omit(read.csv("housing.csv",header=TRUE, stringsAsFactors =FALSE))
housing
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
View(housing)
typeof(housing$lat)
typeof(housing$lng)
housing$lat <- as.numeric(housing$lat)
typeof(as.numeric)
typeof(housing$lat)
housing$lng <- as.numeric(housing$lng)
typeof(housing$lng)
save(points, file = "housing.RData")
save(housing, file = "housing.RData")
load("C:/Users/cjsly/Documents/GitHub/Fall2018-Project2-sec1_proj2_gr5/data/housing.RData")
typeof(housing$lng)
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/test')
runApp('~/test')
runApp('~/test')
setwd("~/GitHub/Fall2018-Project2-sec1_proj2_gr5")
runApp('~/test')
load("~/GitHub/Fall2018-Project2-sec1_proj2_gr5/data/housing.RData")
runApp('~/test')
housing <- read.csv("~/GitHub/Fall2018-Project2-sec1_proj2_gr5/data/housing.RData")
source("~/GitHub/Fall2018-Project2-sec1_proj2_gr5/data/housing.RData")
load("~/GitHub/Fall2018-Project2-sec1_proj2_gr5/data/housing.RData")
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
load("~/GitHub/Fall2018-Project2-sec1_proj2_gr5/data/housing.RData")
leaflet() %>% setView(lng=-73.93, lat=40.77, zoom=10) %>% addProviderTiles('Esri.WorldTopoMap')%>%
addMarkers(data=housing,
lng=~lng,
lat=~lat,
clusterOptions=markerClusterOptions(),
group="housing_cluster"
)
bedroom_filter=housing$bedrooms>input$min_bedrooms
bathroom_filter=housing$bathrooms>input$min_bathrooms
price_filter=housing$price>=input$min_price & housing$price<=input$max_price
filter=bedroom_filter & bathroom_filter & price_filter
return(housing[filter,])
leafletProxy("map")%>%clearGroup("housing_cluster")%>%
addMarkers(data=housingFilter(),
lng=~lng,
lat=~lat,
clusterOptions=markerClusterOptions(),
group="housing_cluster"
)
runApp('~/test')
housing_sort=marksInBounds()
library(dplyr)
library(leaflet)
library(shiny)
library(shinyjs)
library(data.table)
library(devtools)
library(MASS)
library(dplyr)
library(tigris)
library(sp)
library(maptools)
library(broom)
library(httr)
library(rgdal)
library(RColorBrewer)
library(XML)
library(DT)
library(dplyr)
library(tidyr)
library(dplyr)
library(ggplot2)
if(nrow(housing_sort)!=0){
action=apply(housing_sort,1,function(r){
addr=r["addr"]
lat=r["lat"]
lng=r["lng"]
paste0("<a class='go-map' href='' data-lat='",lat,"'data-lng='",lng,"'>",addr,'</a>')
}
)
housing_sort$addr=action
output$rank <- renderDataTable(housing_sort[,c("addr","price","bedrooms","bathrooms")],escape=FALSE)
}
else{
output$rank=renderDataTable(housing_sort[,c("addr","price","bedrooms","bathrooms")])
}
housing_sort=marksInBounds()
marksInBounds <- reactive({
if (is.null(input$map_bounds))
return(housing[FALSE,])
bounds <- input$map_bounds
latRng <- range(bounds$north, bounds$south)
lngRng <- range(bounds$east, bounds$west)
return(
subset(housingFilter(),
lat>= latRng[1] & lat <= latRng[2] &
lng >= lngRng[1] & lng <= lngRng[2])
)
})
marksInBounds <- reactive({
if (is.null(input$map_bounds))
return(housing[FALSE,])
bounds <- input$map_bounds
latRng <- range(bounds$north, bounds$south)
lngRng <- range(bounds$east, bounds$west)
return(
subset(housingFilter(),
lat>= latRng[1] & lat <= latRng[2] &
lng >= lngRng[1] & lng <= lngRng[2])
)
})
housing_sort=marksInBounds()
if(nrow(housing_sort)!=0){
action=apply(housing_sort,1,function(r){
addr=r["addr"]
lat=r["lat"]
lng=r["lng"]
paste0("<a class='go-map' href='' data-lat='",lat,"'data-lng='",lng,"'>",addr,'</a>')
}
)
housing_sort$addr=action
output$rank <- renderDataTable(housing_sort[,c("addr","price","bedrooms","bathrooms")],escape=FALSE)
}
else{
output$rank=renderDataTable(housing_sort[,c("addr","price","bedrooms","bathrooms")])
}
}
housing_sort=marksInBounds()
if(nrow(housing_sort)!=0){
action=apply(housing_sort,1,function(r){
addr=r["addr"]
lat=r["lat"]
lng=r["lng"]
paste0("<a class='go-map' href='' data-lat='",lat,"'data-lng='",lng,"'>",addr,'</a>')
}
)
housing_sort$addr=action
output$rank <- renderDataTable(housing_sort[,c("addr","price","bedrooms","bathrooms")],escape=FALSE)
}
housing_sort=marksInBounds()
housing_sort=marksInBounds()
runApp('app')
install.packages("devtools")
install.packages("devtools")
library("devtools")
install_github("Ram-N/weatherData")
library(weatherData)
checkDataAvailabilityForDateRange("SFO", "2010-10-29", "2013-01-12")
