iconWidth = 10, iconHeight = 10),layerId=as.character(bus$Street))
}
else proxy%>%removeMarker(layerId=as.character(bus$Street))
})
############Subway##############
observeEvent(input$Subway,{
p<-input$Subway
proxy<-leafletProxy("mymap")
if(p==TRUE){
proxy %>%
addMarkers(lat=subway$Latitude, lng=subway$Longitude,icon=icons(
iconUrl = "C:/Users/cjsly/Desktop/GR5291/map/output/subway.png",
iconWidth = 10, iconHeight = 10),layerId=as.character(subway$NOTES))
}
else proxy%>%removeMarker(layerId=as.character(subway$NOTES))
})
##############Landmark#####################
observeEvent(input$Landmark,{
p<-input$Landmark
proxy<-leafletProxy("mymap")
if(p==TRUE){
proxy %>%
addMarkers(lat=landmark$Latitude, lng=landmark$Longitude,icon=icons(
iconUrl = "C:/Users/cjsly/Desktop/GR5291/map/output/landmark.png",
iconWidth = 10, iconHeight = 10),layerId=as.character(landmark$DESIG_ADDR))
}
else proxy%>%removeMarker(layerId=as.character(landmark$DESIG_ADDR))
})
##############Market#####################
observeEvent(input$Market,{
p<-input$Market
proxy<-leafletProxy("mymap")
if(p==TRUE){
proxy %>%
addMarkers(lat=market$lat, lng=market$lon,icon=icons(
iconUrl = "C:/Users/cjsly/Desktop/GR5291/map/output/market.png",
iconWidth = 10, iconHeight = 10),layerId=as.character(market$address))
}
else proxy%>%removeMarker(layerId=as.character(market$address))
})
##############Restaurant#####################
observeEvent(input$Restaurant,{
p<- input$Restaurant
proxy<-leafletProxy("mymap")
if(p==TRUE){
proxy%>%
addMarkers(lat=restaurant$lat, lng=restaurant$lon,icon=icons(
iconUrl = "C:/Users/cjsly/Desktop/GR5291/map/output/restaurant.png",
iconWidth = 10, iconHeight = 10, shadowWidth = 10, shadowHeight = 10),layerId=as.character(restaurant$ADDRESS))
}
else proxy%>%removeMarker(layerId=as.character(restaurant$ADDRESS))
})
##############Crime#####################
observeEvent(input$Crime,{
p <- input$Crime
proxy <- leafletProxy("mymap")
if(p == TRUE){
proxy %>%
addLayersControl(
baseGroups = c("street map"),
overlayGroups = c("markers", "crime"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addMarkers(data = crime, lng = ~Longitude, lat = ~Latitude,
clusterOptions = markerClusterOptions(),
popup = paste("Offense Description:", crime$OFNS_DESC))
}
})
}
m <- points %>% leaflet() %>%
addProviderTiles(providers$OpenStreetMap)%>%
addMarkers(lng = ~longitude, lat = ~latitude,
clusterOptions = markerClusterOptions(),
popup = paste("Description:", points$description, "<br>",
"Transit:", points$transit,"<br>",
"Website:", points$listing_url),
group = "markers")
leaflet(points)
library(leaflet)
leaflet(points)
leaflet(head(points,10))
head(points,10)
View(points)
m <- leaflet(data = points)
?addProviderTiles
providers
providers$OpenStreetMap
providers$OpenStreetMap
m <- addProviderTiles(m, providers$OpenStreetMap)
m
m <- addMarkers(m, lng = ~longitude, lat = ~latitude,
clusterOptions = markerClusterOptions(),
popup = paste("Description:", points$description, "<br>",
"Transit:", points$transit,"<br>",
"Website:", points$listing_url),
group = "markers")
m
m <- leaflet(data = head(points,10))
m <- addProviderTiles(m, providers$OpenStreetMap)
m
m <- addMarkers(m, lng = ~longitude, lat = ~latitude,
clusterOptions = markerClusterOptions(),
popup = paste("Description:", points$description, "<br>",
"Transit:", points$transit,"<br>",
"Website:", points$listing_url),
group = "markers")
m
m
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
library(shiny)
library(leaflet)
library(data.table)
library(devtools)
install.packages("devtools")
library(dplyr)
library(tigris)
install.packages("tigris")
library(sp)
library(maptools)
library(broom)
library(httr)
install.packages("broom")
library(httr)
library(rgdal)
library(RColorBrewer)
library(XML)
library(DT)
library(dplyr)
library(tidyr)
library(dplyr)
library(ggplot2)
leaflet() %>%
addProviderTiles('Esri.WorldTopoMap')
leaflet() %>%
addProviderTiles('Esri.WorldTopoMap') %>%
setView(lng = -73.971035, lat = 40.775659, zoom = 12) %>%
addMarkers(data=housing,
lng=~lng,
lat=~lat,
clusterOptions=markerClusterOptions(),
group="housing_cluster"
)
leaflet() %>%
addProviderTiles('Esri.WorldTopoMap') %>%
setView(lng = -73.971035, lat = 40.775659, zoom = 12)
runApp('GitHub/Fall2017-project2-grp5/app')
shiny::runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
shiny::runApp('GitHub/Fall2017-project2-grp6/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
packages.used=c("leaflet","geosphere","shiny","dplyr","shinyjs","shinydashboard")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(shinydashboard)
library(dplyr)
library(leaflet)
library(shiny)
library(shinyjs)
museum<-na.omit(read.csv("../data/museums.csv"))
theatre<-read.csv('../data/theatre.csv')
gallery<-read.csv("../data/Gallery.csv")
library<-read.csv('../data/library.csv')
restaurant<- read.csv('../data/restaurant_new.csv')
icon_museum<-icons(iconUrl = 'icon_museum.png',iconHeight = 15, iconWidth = 15)
icon_theatre<-icons(iconUrl = 'icon_theatre.png', iconHeight = 18, iconWidth = 18)
icon_rest<-icons(iconUrl =  'icon_rest.png', iconHeight=25, iconWidth = 25)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$map<-renderLeaflet({
leaflet() %>% setView(lng=-73.93, lat=40.77, zoom=10) %>% addTiles()
})
observeEvent(input$destination, {
if('Museum'==input$destination){
leafletProxy('map') %>% clearMarkerClusters() %>% setView(lng=-73.93, lat=40.77, zoom=12) %>%
addMarkers(museum$longtitude,
museum$latitude, icon=icon_museum,
clusterOptions=markerClusterOptions(),
popup=paste('Name:',museum$NAME, '<br/>',
'Tel:', museum$TEL, '<br/>',
'Zip:', museum$ZIP, '<br/>',
'Website:', a(museum$URL, href=museum$URL), '<br/>',
'Add:', museum$ADRESS1, '<br/>'
)
)
}
else if('Theater'==input$destination)
{
leafletProxy('map') %>% clearMarkerClusters() %>% setView(lng=-73.93, lat=40.77, zoom=12) %>%
addMarkers(theatre$longtitude,
theatre$latitude, icon=icon_theatre,
clusterOptions=markerClusterOptions(),
popup=paste('Name:', theatre$NAME, '<br/>',
'Tel:', theatre$TEL, '<br/>',
'Zip:', theatre$ZIP, '<br/>',
'Website:', a(theatre$URL, href=theatre$URL), '<br/>',
'Add:', theatre$ADDRESS1, '<br/>'))
}
else if ('Gallery'==input$destination)
{
leafletProxy('map') %>% clearMarkerClusters() %>% setView(lng=-73.93, lat=40.77, zoom=12) %>%
addMarkers(gallery$LON,
gallery$LAT, icon=icon_theatre,
clusterOptions=markerClusterOptions(),
popup=paste('Name:', gallery$NAME, '<br/>',
'Tel:', gallery$TEL, '<br/>',
'Zip:', gallery$ZIP, '<br/>',
'Website:', a(gallery$URL, href=gallery$URL), '<br/>',
'Add:', gallery$ADDRESS1, '<br/>'))
}
else {
leafletProxy('map') %>% clearMarkerClusters() %>% setView(lng=-73.93, lat=40.77, zoom=12) %>%
addMarkers(library$LON,
library$LAT, icon=icon_theatre,
clusterOptions=markerClusterOptions(),
popup=paste('Name:', library$NAME, '<br/>',
'Zip:', library$ZIP, '<br/>',
'Website:', a(library$URL, href=library$URL), '<br/>',
'Add:', library$ADDRESS1, '<br/>'))
}
})
observe({
click<- input$map_marker_click
if(is.null(click))
return()
## use click to access the zoom and set the view according this marker
leafletProxy('map') %>% setView(lng=click$lng,
lat=click$lat,
zoom=15)
})
observeEvent(input$button2,{
leafletProxy('map') %>% setView(lng=-73.93, lat=40.77, zoom=12)
})
observeEvent(input$map_marker_click, {
show('Sure')
})
observeEvent(input$button1, {
show('Resta')
})
observeEvent(input$button3,{
show('Recom')
})
observeEvent(input$button3, {
click<- input$map_marker_click
type<- input$type
rank<- input$rank
if(is.null(type))
return()
lng<- click$lng
lat<- click$lat
if(rank=='by Distance'){
add_to_df<- reactive({
rest <-  restaurant %>% dplyr::filter(TYPE==type) %>%
mutate(dist = sqrt((LON-lng)^2 + (LAT-lat)^2)) %>% arrange(dist)
rest
})
new_df<- reactive({
all_rest <- add_to_df()
top6<- head(all_rest,6)
top6
})
dist_column<- reactive({
avail_rest<- new_df()
dist<- avail_rest$dist
dist
})
if(all(dist_column()>0.05)){
output$recom<- renderText('Oops! There is no available restaurant around you!')}
else{leafletProxy('map',data = new_df())  %>% addMarkers(lng = ~LON, lat = ~LAT, icon=icon_rest,
popup=~paste('Name:', NAME, '<br/>',
'Tel:', TEL, '<br/>',
'Zip:', ZIP, '<br/>',
'Add:', ADDRESS, '<br/>',
'Yelp.Star:', YELP.STAR, '<br/>'))
output$recom<- renderText({
recom_rest<-new_df()
paste('Name:', recom_rest[1,]$NAME,'\n',
'Tel:', recom_rest[1,]$TEL,'\n',
'Zip:', recom_rest[1,]$ZIP,'\n',
'Add:', recom_rest[1,]$ADDRESS,'\n',
'Yelp.Star:', recom_rest[1,]$YELP.STAR)
})
}
}
else{
add_to_df<- reactive({
rest<- restaurant %>% dplyr::filter(TYPE==type) %>%
mutate(dist = sqrt((LON-lng)^2 + (LAT-lat)^2)) %>% arrange(dist)
rest
})
new_df<- reactive({
all_rest<-add_to_df()
top15<-head(all_rest, 15) %>% arrange(desc(YELP.STAR))
top6<- head(top15, 6)
top6
})
dist_column<- reactive({
avail_rest<-new_df()
dist<- avail_rest$dist
dist
})
if(all(dist_column()>0.05)){
output$recom<- renderText('Oops! There is no available restaurant around you!')}
else{leafletProxy('map',data = new_df())  %>% addMarkers(lng = ~LON, lat = ~LAT, icon=icon_rest,
popup=~paste('Name:', NAME, '<br/>',
'Tel:', TEL, '<br/>',
'Zip:', ZIP, '<br/>',
'Add:', ADDRESS, '<br/>',
'Yelp.Star:', YELP.STAR, '<br/>'))
output$recom<- renderText({
recom_rest<-new_df()
paste('Name:', recom_rest[1,]$NAME,'\n',
'Tel:', recom_rest[1,]$TEL,'\n',
'Zip:', recom_rest[1,]$ZIP,'\n',
'Add:', recom_rest[1,]$ADDRESS,'\n',
'Yelp.Star:', recom_rest[1,]$YELP.STAR)
})
}
}
})
observeEvent(input$button4,{
leafletProxy('map') %>% clearMarkers()
hide('Recom')
})
observeEvent(input$button5,{
leafletProxy('map') %>% clearMarkers()
hide('Recom')
hide('Resta')
hide('Sure')
})
})
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2017-project2-grp5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
shiny::runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
shiny::runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Spr2016-Proj2-Grp1/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
shiny::runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
shiny::runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
library(RCurl)
myfile <- getURL('https://www.wunderground.com/weather/us/ny/new-york-city', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile
baseURL <- 'https://www.wunderground.com/weather/us/ny/new-york-city'
library(rvest)
webpage <- read_html("https://www.wunderground.com/weather/us/ny/new-york-city")
webpage
results <- webpage %>% html_nodes(".short-desc")
results
webpage
webpage <- readLines("https://www.wunderground.com/weather/us/ny/new-york-city", warn = F)
webpage
webpage <- readLines("https://www.wunderground.com/weather/us/ny/new-york-city", warn = F)
webpage
webpage
webpage <- read.csv("https://www.wunderground.com/weather/us/ny/new-york-city", warn = F)
webpage <- readLines("https://weather.com/weather/hourbyhour/l/New+York+NY+USNY0996:1:US", warn = F)
webpage
:grep("NY Hourly Weather", webpage)
grep("NY Hourly Weather", webpage)
api <- d525a06f470a8117b7eef4106ec20011
api <- "d525a06f470a8117b7eef4106ec20011"
library(devtools)
install_github("mukul13/ROpenWeatherMap")
data=get_current_weather(api,city="new york")
str(data)
library(devtools)
data=get_current_weather(api,city="new york")
library(ROpenWeatherMap)
api <- "d525a06f470a8117b7eef4106ec20011"
data=get_current_weather(api,city="new york")
str(data)
webpage[3]
grep("Sunny", webpage[3])
grep("cloudy", webpage[3])
grep("rainy", webpage[3])
grep("rainy", webpage[3]) == 0
length(webpage[3])
length(char(webpage[3]))
webpage <- readLines("https://www.google.com/search?rlz=1C1AVFC_enUS737US737&ei=KE6-W5qQBYb7zgLNmY1g&q=weather+nyc&oq=weather+nyc&gs_l=psy-ab.3..0i131i20i263j0i20i263i264j0l8.6798.7813..8024...0.0..0.71.260.4......0....1..gws-wiz.......0i71j35i39j0i131j0i131i20i263i264.lv7yIGLxCbs", warn = F)
webpage
library(devtools)
api <- "d525a06f470a8117b7eef4106ec20011"
library(ROpenWeatherMap)
library(ROpenWeatherMap)
api <- "d525a06f470a8117b7eef4106ec20011"
data=get_current_weather(api,city="new york")
str(data)
data=get_weather_forecast(api_key,city="new york")
head(cbind(data$list$dt_txt,data$list$main$temp))
data=get_weather_forecast(api,city="new york")
head(cbind(data$list$dt_txt,data$list$main$temp))
data=get_weather_forecast(api,city="new york")
head(cbind(data$list$dt_txt,data$list$main$temp))
data
data=get_current_weather(api,city="new york")
data
str(data)
library(owmr)
install.packages("owmr")
library(owmr)
(res <- get_current("London", units = "metric") %>%
flatten()) %>% names()
owmr_settings(api_key = api)
(res <- get_current("London", units = "metric") %>%
flatten()) %>% names()
res[c("coord.lon", "coord.lat", "main.temp", "weather.description")]
(res <- get_current("New York", units = "metric") %>%
flatten()) %>% names()
res[c("coord.lon", "coord.lat", "main.temp", "weather.description")]
shiny::runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
api <- "d525a06f470a8117b7eef4106ec20011"
owmr_settings(api_key = api)
set_key("AIzaSyDTIop6J0QlXc8RRbj5M3kAVyOy3zyXzTE")
api_key
observeEvent(
if ()
(res <- get_current("New York", units = "metric") %>%
flatten()) %>% names()
)
(res <- get_current("New York", units = "metric") %>%
flatten()) %>% names()
(res <- get_current("New York", units = "metric") %>%
flatten())["main.temp"]
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2017-project2-grp6/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
shiny::runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
?style
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
?print
runApp('GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
setwd("~/GitHub/Fall2018-Project2-sec1_proj2_gr5/data")
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr5/app')
